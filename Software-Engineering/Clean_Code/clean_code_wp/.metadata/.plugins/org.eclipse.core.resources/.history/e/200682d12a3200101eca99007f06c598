# Builder Pattern

The Builder Pattern is a creational design pattern used when you need to construct a complex object step by step and you want to avoid having a constructor with too many parameters.

âœ… When to use Builder Pattern
1. Object has many optional fields.
2. You want to make the object immutable.
3. You want readable and maintainable code (fluent API).

```java

public class Computer {
    private String CPU;
    private int RAM;
    private int storage;
    private boolean hasGraphicsCard;

    private Computer(Builder builder) {
        this.CPU = builder.CPU;
        this.RAM = builder.RAM;
        this.storage = builder.storage;
        this.hasGraphicsCard = builder.hasGraphicsCard;
    }

    @Override
    public String toString() {
        return "Computer [CPU=" + CPU + ", RAM=" + RAM + " GB, Storage=" + storage + " GB, GraphicsCard=" + hasGraphicsCard + "]";
    }

    public static class Builder {
        // Default values
        private String CPU = "Intel i3";
        private int RAM = 4;
        private int storage = 256;
        private boolean hasGraphicsCard = false;

        public Builder setCPU(String CPU) {
            this.CPU = CPU;
            return this;
        }

        public Builder setRAM(int RAM) {
            this.RAM = RAM;
            return this;
        }

        public Builder setStorage(int storage) {
            this.storage = storage;
            return this;
        }

        public Builder setGraphicsCard(boolean hasGraphicsCard) {
            this.hasGraphicsCard = hasGraphicsCard;
            return this;
        }

        public Computer build() {
            return new Computer(this);
        }
    }
}


public class BuilderDemo {
    public static void main(String[] args) {
        Computer customPC = new Computer.Builder()
                                .setCPU("AMD Ryzen 7")
                                .setRAM(16)
                                .setGraphicsCard(true)
                                .build();

        Computer defaultPC = new Computer.Builder()
                                .build();

        System.out.println("Custom PC: " + customPC);
        System.out.println("Default PC: " + defaultPC);
    }
}



```